alphabet:
	s, 0, +, x, =, (, ), 
	!, =>, <=>, &, |
note:
	num is a terminal type which the lexer creates from
	the following rules:
	E => sE | 0
	(s is the successor function)

The parser is an implementation of this context-free grammar

a => (!b => c) <=> d

< logical stuff >
A => A<=>B | B
B => B =>C | C
C => C & D | D
D => D | E | E
E => !E | (A) | Q=Q

< arithmetic stuff >
P => Q=Q | Q
Q => Q+R | R
R => RxF | F
F => sF | 0 | (Q)

todo:
< > Make Interpreter::visit function templated, rather than 
using a switch statement in it.
<x> implement "s" as a separate type from num
(currently the lexer condenses applications of "s" into a single number token)
<x> implement robinson arithmetic axioms to evaluate equations
